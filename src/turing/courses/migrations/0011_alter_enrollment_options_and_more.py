# Generated by Django 5.2.2 on 2025-10-03 21:54

import courses.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

# --- FUNCIONES DE MIGRACIÓN DE DATOS ---

def copy_enrollment_data(apps, schema_editor):
    """
    Copia la referencia al curso antiguo al nuevo campo 'legacy_course'.
    """
    Enrollment = apps.get_model('courses', 'Enrollment')
    # En este punto de la migración, el campo 'course' todavía existe en el modelo histórico.
    for enrollment in Enrollment.objects.using(schema_editor.connection.alias).all():
        # La comprobación hasattr no es necesaria, el campo existe en este estado.
        enrollment.legacy_course = enrollment.course
        enrollment.save(update_fields=['legacy_course'])

def copy_tutoring_slot_data(apps, schema_editor):
    """
    Copia la referencia al teacher_course antiguo al nuevo campo legacy.
    Deja el nuevo campo 'group' como NULO para ser asignado manualmente.
    """
    TutoringSlot = apps.get_model('courses', 'TutoringSlot')
    for slot in TutoringSlot.objects.using(schema_editor.connection.alias).all():
        slot.legacy_teacher_course_id = slot.teacher_course_id
        slot.save(update_fields=['legacy_teacher_course_id'])

# --- FIN DE LAS FUNCIONES ---


class Migration(migrations.Migration):

    dependencies = [
        ('courses', '0010_alter_knowledgebasefile_file'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        # --- Pasos de preparación (correctos como estaban) ---
        migrations.AlterModelOptions(
            name='enrollment',
            options={'verbose_name': 'Inscripción', 'verbose_name_plural': 'Inscripciones'},
        ),
        migrations.AlterUniqueTogether(
            name='enrollment',
            unique_together=set(),
        ),
        migrations.AlterUniqueTogether(
            name='tutoringslot',
            unique_together=set(),
        ),
        migrations.AddField(
            model_name='enrollment',
            name='legacy_course',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='courses.course', verbose_name='Curso Original (Migración)'),
        ),
        migrations.AddField(
            model_name='tutoringslot',
            name='legacy_teacher_course_id',
            field=models.IntegerField(blank=True, editable=False, null=True, verbose_name='Relación Antigua (Migración)'),
        ),

        # ==============================================================================
        # >>> INICIO DE LA SECCIÓN CRÍTICA <<<
        # Aquí es donde ejecutamos nuestras funciones de copia de datos.
        # ==============================================================================
        
        migrations.RunPython(copy_enrollment_data, migrations.RunPython.noop),
        migrations.RunPython(copy_tutoring_slot_data, migrations.RunPython.noop),

        # ==============================================================================
        # >>> FIN DE LA SECCIÓN CRÍTICA <<<
        # ==============================================================================

        # --- Pasos de reestructuración (correctos como estaban) ---
        migrations.AlterField(
            model_name='enrollment',
            name='joined_at',
            field=models.DateTimeField(auto_now_add=True, verbose_name='Fecha de unión'),
        ),
        migrations.AlterField(
            model_name='enrollment',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to=settings.AUTH_USER_MODEL, verbose_name='Estudiante'),
        ),
        migrations.AlterField(
            model_name='tutoringschedule',
            name='file',
            field=models.FileField(upload_to=courses.models.sanitized_upload_to, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])], verbose_name='Archivo de Monitorías (PDF)'),
        ),
        migrations.AlterModelTable(
            name='enrollment',
            table=None,
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nombre del Grupo (ej: Grupo 1, G-01)')),
                ('schedule', models.CharField(max_length=255, verbose_name='Horario del Grupo')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='courses.course', verbose_name='Curso')),
                ('teacher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='taught_groups', to=settings.AUTH_USER_MODEL, verbose_name='Profesor')),
            ],
            options={
                'verbose_name': 'Grupo',
                'verbose_name_plural': 'Grupos',
                'unique_together': {('course', 'name')},
            },
        ),
        migrations.AddField(
            model_name='enrollment',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='courses.group', verbose_name='Grupo'),
        ),
        migrations.AddField(
            model_name='tutoringslot',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tutoring_slots', to='courses.group', verbose_name='Grupo'),
        ),
        # Ahora que los datos están copiados, es seguro eliminar los campos antiguos.
        migrations.RemoveField(
            model_name='enrollment',
            name='course',
        ),
        migrations.RemoveField(
            model_name='tutoringslot',
            name='teacher_course',
        ),
        # Y finalmente, eliminar el modelo antiguo.
        migrations.DeleteModel(
            name='TeacherCourse',
        ),
    ]